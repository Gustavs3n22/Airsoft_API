# API классификации товаров для страйкбола

## Описание
Этот проект представляет собой API на базе Flask для классификации товаров, связанных со страйкболом, по текстовым описаниям и изображениям. API использует продвинутые модели машинного обучения: текстовый классификатор на основе BERT и классификатор изображений на основе VGG19. Поддерживается обработка текстовых данных и изображений, логирование запросов в базу данных SQLite и аутентификация с помощью API-ключей для обеспечения безопасности.

## Фичи API
- **Классификация текста**: Использует модель BERT (`DeepPavlov/rubert-base-cased`) для классификации текстовых описаний в категории, такие как "Снаряжение и защита", "Аксессуары и Запчасти", "Страйкбольное оружие".
- **Классификация изображений**: Использует модель VGG19 для классификации изображений по URL.
- **Аутентификация по API-ключу**: Обеспечивает безопасный доступ с использованием ключей, хранящихся в файле `keys.json`.
- **Логирование запросов**: Все запросы к API, включая входные данные и ответы, сохраняются в базу данных SQLite (`api_logs.db`).
- **Удобная архитектура**: Построена на Flask, что делает API легким и удобным для развертывания.

## Требования
Для работы с проектом необходимо:
- Python 3.8 или выше
- pip (менеджер пакетов Python)
- GPU с поддержкой CUDA (не обязательно!, для ускорения вычислений с PyTorch)

## Установка
1. **Клонируйте репозиторий**:
   ```bash
   git clone https://github.com/Gustavs3n22/Airsoft_API
   cd Airsoft_API
   ```

2. **Создайте виртуальное окружение** (рекомендуется):
   ```bash
   python -m venv venv
   source venv/bin/activate  # На Windows: venv\Scripts\activate
   ```

3. **Установите зависимости**:
   ```bash
   pip install -r requirements.txt
   ```

4. **Подготовьте файлы моделей**:
   - Скачайте модель текстового классификатора (`pytorch_model.bin`) и поместите её в корневую папку проекта.
   - Скачайте модель классификатора изображений (`vgg19_model.keras`) и поместите её в корневую папку проекта.
   - Ссылка на архив с моделями: https://drive.google.com/file/d/1C6GJqTnrwtApl2Gj5aR7mWek6Wjlzj9l/view?usp=sharing
   - Убедитесь, что файлы `label_encoder.pkl` (для меток классов изображений) и `image_classes.json` (для сопоставления категорий) находятся в корневой папке.
   - Создайте файл `keys.json` с действующими API-ключами:
     ```json
     {
       "api_keys": ["ваш-ключ-1", "ваш-ключ-2"]
     }
     ```

5. **Инициализация базы данных**:
   База данных SQLite (`api_logs.db`) создаётся автоматически при первом запуске.

## Использование
1. **Запустите API**:
   ```bash
   python api.py
   ```
   API будет доступен по адресу `http://localhost:3000`.

2. **Отправка запроса**:
   Отправьте POST-запрос на `/api/predict` с JSON-данными и действующим API-ключом в теле запроса.

   Пример запроса с использованием `curl`:
   ```curl.py
	import requests
	import json

	API_URL = "http://185.252.146.72:3000/api/predict"
	payload = {
		"api_key": "GF5DI92953LI10M",
		"text": "Продаю новую страйкбольную винтовку ASG и тактический жилет. В комплекте магазин и ремень. Состояние идеальное.",
		"photo_urls": [
			"https://images.unsplash.com/photo-1734000403582-da52e3699c0c?q=80&w=686&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
			"https://images.unsplash.com/photo-1734555772511-324448b754df?q=80&w=699&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		]
	}

	try:
		response = requests.post(API_URL, json=payload)
		if response.status_code == 200:
			result = response.json()
			print("API Response:")
			print(json.dumps(result, indent=2, ensure_ascii=False))
		else:
			print(f"Error: Received status code {response.status_code}")
			print(response.text)

	except requests.exceptions.RequestException as e:
		print(f"Error making request: {e}")
   ```

   Пример ответа:
   ```json
	{
	  "photo_prediction": [
		{
		  "prediction": [
			{
			  "url": "https://images.unsplash.com/photo-1734000403582-da52e3699c0c?q=80&w=686&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
			  "класс": "Аксессуары и Запчасти",
			  "подкласс": "Магазины",
			  "уверенность": 0.4519069790840149
			}
		  ]
		},
		{
		  "prediction": [
			{
			  "url": "https://images.unsplash.com/photo-1734555772511-324448b754df?q=80&w=699&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
			  "класс": "Страйкбольное оружие",
			  "подкласс": "Автоматы М-серии",
			  "уверенность": 1.0
			}
		  ]
		}
	  ],
	  "text_prediction": [
		{
		  "категория": "Снаряжение и защита",
		  "уверенность": 0.4319526255130768
		},
		{
		  "категория": "Аксессуары и Запчасти",
		  "уверенность": 0.4575238823890686
		},
		{
		  "категория": "Страйкбольное оружие",
		  "уверенность": 0.4321633279323578
		}
	  ]
	}
   ```

3. **Эндпоинт API**:
   - **POST /api/predict**
     - **Входные данные**:
       - `text` (строка, обязательно): Текстовое описание страйкбольного товара.
       - `photo_urls` (строка или список строк, опционально): URL-адреса изображений для классификации.
       - `api_key` (строка, обязательно): API-ключ для аутентификации.
     - **Выходные данные**: JSON-объект с полями `photo_prediction` и `prediction`, содержащими результаты классификации и показатель уверенности в классе, а так же ссылку на картинку.
     - **Коды ошибок**:
       - 200: Успешная классификация
       - 400: Неверный JSON-запрос
       - 401: Неверный или отсутствующий API-ключ

## Структура проекта
```
Airsoft_API/
├── app.py                 # Основной файл приложения Flask
├── pytorch_model.bin      # Модель текстового классификатора
├── vgg19_model.keras      # Модель классификатора изображений
├── label_encoder.pkl      # Кодировщик меток для изображений
├── image_classes.json     # Сопоставление классов изображений
├── keys.json              # Файл с API-ключами
├── api_logs.db            # База данных SQLite для логов
├── requirements.txt       # Список зависимостей
└── README.md              # Документация проекта
```

## Развертывание
Для развертывания на сервере:
1. Убедитесь, что все зависимости и файлы моделей находятся в корневой папке.
2. Настройте сервер (например, Gunicorn с Nginx) для продакшн-использования
3. Настройте окружение для поддержки GPU, если используется CUDA.

## Контакты
Если у вас есть вопросы или предложения, свяжитесь с автором:
- GitHub: Gustavs3n22 https://github.com/Gustavs3n22/
- Email: zinovvladimir23@gmail.com